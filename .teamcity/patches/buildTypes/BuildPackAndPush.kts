package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.BuildType
import jetbrains.buildServer.configs.kotlin.buildSteps.powerShell
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.triggers.VcsTrigger
import jetbrains.buildServer.configs.kotlin.triggers.vcs
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, create a buildType with id = 'BuildPackAndPush'
in the project with id = 'DotnetNugetBuild', and delete the patch script.
*/
create(RelativeId("DotnetNugetBuild"), BuildType({
    id("BuildPackAndPush")
    name = "Build, Pack and Push"

    artifactRules = "artifacts/nuget/*.nupkg"

    params {
        param("DevelopmentVersion", "2023.9")
        param("ReleaseVersion", "2022.3")
        param("version.number", "")
    }

    vcs {
        root(DslContext.settingsRoot)

        cleanCheckout = true
        showDependenciesChanges = true
    }

    steps {
        powerShell {
            name = "Create Version Number And Artifacts"
            scriptMode = script {
                content = """
                    ${'$'}Branch = "%teamcity.build.branch%";
                    
                    if(${'$'}Branch.StartsWith('releases/') -or ${'$'}Branch -eq "release")
                    {
                        ${'$'}ReleaseVersion = "%ReleaseVersion%"
                    }
                    else
                    {
                        ${'$'}ReleaseVersion = "%DevelopmentVersion%"
                    }
                    
                    Write-Host ([string]::Format("##teamcity[setParameter name='version.number' value='{0}.{1}']", ${'$'}ReleaseVersion, "%build.counter%"));
                    Write-Host ([string]::Format("##teamcity[buildNumber '{0}.{1}']", ${'$'}ReleaseVersion, "%build.counter%"));
                    
                    if(!${'$'}Branch.StartsWith("releases/") -and ${'$'}Branch -ne "master" -and ${'$'}Branch -ne "release"-and ${'$'}Branch -ne "DarwinOrgSetup")
                    {
                        Write-Host ("##teamcity[setParameter name='ArtifactPaths' value='']");
                    }
                """.trimIndent()
            }
        }
        script {
            name = "Build, Publish, Pack and Push Nuget package"
            workingDir = "./DynamoStudentManager"
            scriptContent = """
                :; chmod +x ./build.cmd
                :; chmod +x ./build.sh
                ./build.sh -Target Push -BuildVersion %build.number% -NugetApiKey %dev.nuget.apikey% -NugetApiUrl %system.nuget.uri%
            """.trimIndent()
        }
    }

    triggers {
        vcs {
            quietPeriodMode = VcsTrigger.QuietPeriodMode.USE_DEFAULT
            branchFilter = """
                +:*
                -:merge-requests/*
            """.trimIndent()
        }
    }
}))

