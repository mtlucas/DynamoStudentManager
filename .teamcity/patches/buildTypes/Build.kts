package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.BuildType
import jetbrains.buildServer.configs.kotlin.buildFeatures.dockerSupport
import jetbrains.buildServer.configs.kotlin.buildSteps.dockerCommand
import jetbrains.buildServer.configs.kotlin.buildSteps.dotnetBuild
import jetbrains.buildServer.configs.kotlin.buildSteps.nuGetInstaller
import jetbrains.buildServer.configs.kotlin.buildSteps.powerShell
import jetbrains.buildServer.configs.kotlin.triggers.vcs
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, create a buildType with id = 'Build'
in the project with id = 'DockerImageBuild', and delete the patch script.
*/
create(RelativeId("DockerImageBuild"), BuildType({
    id("Build")
    name = "Build Docker"


    params {
        param("DevelopmentVersion", "%build.number%")
        param("ReleaseVersion", "%build.number%")
    }

    vcs {
        root(DslContext.settingsRoot)
    }

    steps {
        powerShell {
            name = "Create Version Number And Artifacts"
            enabled = false
            scriptMode = script {
                content = """
                    ${'$'}Branch = "%teamcity.build.branch%";
                    
                    if(${'$'}Branch.StartsWith('releases/') -or ${'$'}Branch -eq "release")
                    {
                        ${'$'}ReleaseVersion = "%ReleaseVersion%"
                    }
                    else
                    {
                        ${'$'}ReleaseVersion = "%DevelopmentVersion%"
                    }
                    
                    Write-Host ([string]::Format("##teamcity[setParameter name='version.number' value='{0}.{1}']", ${'$'}ReleaseVersion, "%build.counter%"));
                    Write-Host ([string]::Format("##teamcity[buildNumber '{0}.{1}']", ${'$'}ReleaseVersion, "%build.counter%"));
                    
                    if(!${'$'}Branch.StartsWith("releases/") -and ${'$'}Branch -ne "master" -and ${'$'}Branch -ne "release"-and ${'$'}Branch -ne "DarwinOrgSetup")
                    {
                        Write-Host ("##teamcity[setParameter name='ArtifactPaths' value='']");
                    }
                """.trimIndent()
            }
        }
        dockerCommand {
            commandType = build {
                source = file {
                    path = "DynamoStudentManager/Dockerfile"
                }
                namesAndTags = "mtlucas/dynamostudentmanager:latest"
            }
        }
        dockerCommand {
            name = "Docker push"
            commandType = push {
                namesAndTags = "mtlucas/dynamostudentmanager:latest"
            }
            param("dockerfile.path", "DynamoStudentManager/Dockerfile")
        }
        nuGetInstaller {
            enabled = false
            toolPath = "%teamcity.tool.NuGet.CommandLine.DEFAULT%"
            projects = "DynamoStudentManager/DynamoStudentManager.sln"
            updatePackages = updateParams {
            }
        }
        dotnetBuild {
            enabled = false
            projects = "DynamoStudentManager/DynamoStudentManager.sln"
            sdk = "6"
        }
    }

    triggers {
        vcs {
        }
    }

    features {
        dockerSupport {
            cleanupPushedImages = true
            loginToRegistry = on {
                dockerRegistryId = "PROJECT_EXT_5"
            }
        }
    }

    requirements {
        equals("system.agent.name", "loadmaster-1")
    }
}))

